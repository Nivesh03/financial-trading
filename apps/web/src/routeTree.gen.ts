/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as DemoTableRouteImport } from './routes/demo.table'
import { Route as ProductsIdIndexRouteImport } from './routes/products/$id/index'
import { Route as ProductsIdCheckoutRouteImport } from './routes/products/$id/checkout'
import { Route as DemoFormSimpleRouteImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo.form.address'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdIndexRoute = ProductsIdIndexRouteImport.update({
  id: '/products/$id/',
  path: '/products/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdCheckoutRoute = ProductsIdCheckoutRouteImport.update({
  id: '/products/$id/checkout',
  path: '/products/$id/checkout',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/demo/table': typeof DemoTableRoute
  '/products': typeof ProductsIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/products/$id/checkout': typeof ProductsIdCheckoutRoute
  '/products/$id': typeof ProductsIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/demo/table': typeof DemoTableRoute
  '/products': typeof ProductsIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/products/$id/checkout': typeof ProductsIdCheckoutRoute
  '/products/$id': typeof ProductsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/demo/table': typeof DemoTableRoute
  '/products/': typeof ProductsIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/products/$id/checkout': typeof ProductsIdCheckoutRoute
  '/products/$id/': typeof ProductsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/sign-up'
    | '/demo/table'
    | '/products'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/products/$id/checkout'
    | '/products/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/sign-up'
    | '/demo/table'
    | '/products'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/products/$id/checkout'
    | '/products/$id'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/sign-up'
    | '/demo/table'
    | '/products/'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/products/$id/checkout'
    | '/products/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  DemoTableRoute: typeof DemoTableRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  ProductsIdCheckoutRoute: typeof ProductsIdCheckoutRoute
  ProductsIdIndexRoute: typeof ProductsIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id/': {
      id: '/products/$id/'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id/checkout': {
      id: '/products/$id/checkout'
      path: '/products/$id/checkout'
      fullPath: '/products/$id/checkout'
      preLoaderRoute: typeof ProductsIdCheckoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  DemoTableRoute: DemoTableRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  ProductsIdCheckoutRoute: ProductsIdCheckoutRoute,
  ProductsIdIndexRoute: ProductsIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
